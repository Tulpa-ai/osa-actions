import xml.etree.ElementTree as ET
from typing import Optional

from action_state_interface.action import Action, StateChangeSequence
from action_state_interface.action_utils import parse_nmap_xml_report, shell
from action_state_interface.exec import ActionExecutionError, ActionExecutionResult
from artefacts.ArtefactManager import ArtefactManager
from kg_api import Entity, GraphDB, Pattern, Relationship
from kg_api.query import Query
from Session import SessionManager


def add_vulnerability_entities(port, merge_pattern):
    changes = []
    if port["service"].get("vulnerabilities"):
        for vuln in port["service"]["vulnerabilities"]:
            vulnerability = Entity(
                'Vulnerability', 
                alias='vulnerability', 
                id=vuln["id"],
                cvss=vuln["cvss"],
                is_exploit=vuln["is_exploit"],
                vuln_type=vuln["type"]
            )
            vuln_merge_pattern = merge_pattern.with_edge(Relationship('exposes')).with_node(vulnerability)
            changes.append((merge_pattern, 'merge', vuln_merge_pattern))
    return changes

class NmapVulnerabilityScan(Action):
    def __init__(self):
        super().__init__("NmapVulnerabilityScan", "T1046", "TA0007", ["loud", "fast"])
        self.noise = 0.9
        self.impact = 0

    def expected_outcome(self, pattern: Pattern) -> list[str]:
        return [
            f"Gain detailed knowledge of vulnerabilities for the {pattern.get('service').get('protocol')} service running on port {pattern.get('openport').get('number')} on {pattern.get('asset').get('ip_address')}.",
        ]

    def get_target_query(self) -> Query:
        asset = Entity('Asset', alias='asset')
        openport = Entity('OpenPort', alias='openport')
        service = Entity('Service', alias='service')
        pattern = asset.points_to(openport).points_to(service)
        query = Query()
        query.match(pattern)
        query.ret_all()
        return query

    def function(self, sessions: SessionManager, artefacts: ArtefactManager, pattern: Pattern) -> ActionExecutionResult:
        asset = pattern.get('asset')
        portnum = pattern.get('openport').get('number')
        uuid = artefacts.placeholder("nmap-vulnerability-scan.xml")
        out_path = artefacts.get_path(uuid)
        result = shell("nmap", ["-sV", "--script=vulscan/vulscan.nse", "--script-args", "vulscandb=cve.csv,vulscanoutput=listid", "--script=banner", "-p", str(portnum), asset.get('ip_address'), "-oX", out_path])
        result.artefacts["xml_report"] = uuid
        return result

    def capture_state_change(self, gdb: GraphDB, artefacts: ArtefactManager, pattern: Pattern, output: ActionExecutionResult) -> StateChangeSequence:
        openport = pattern.get('openport')
        service = pattern.get("service")
        changes: StateChangeSequence = []
        try:
            with artefacts.open(output.artefacts["xml_report"], 'r') as f:
                content = f.read()
        except KeyError as e:
            raise ActionExecutionError(e)
        
        parsed_info = parse_nmap_xml_report(content)
        for port in parsed_info["ports"]:
            if port.get("banner"):
                openport.set('banner', port["banner"])
                changes.append((pattern, "update", openport))
            
            if port.get("vulnerabilities"):
                for vuln in port["vulnerabilities"]:
                    vulnerability = Entity(
                        'Vulnerability', 
                        alias='vulnerability',
                        id=vuln
                    )
                    vuln_pattern = service.with_edge(Relationship('exposes')).with_node(vulnerability)
                    changes.append((service, 'merge', vuln_pattern))

        return changes
